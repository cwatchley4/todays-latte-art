{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import supabase from \"./supabase\";\n// import \"./style.css\";\n\n// const initialArt = [\n//   {\n//     id: 1,\n//     text: \"This is my latte art. I made a flower.\",\n//     recipe: \"https://opensource.fb.com/\",\n//     category: \"espresso\",\n//     votesMug: 24,\n//     votesHeart: 9,\n//     votesMindBlown: 4,\n//     createdIn: 2021,\n//   },\n//   {\n//     id: 2,\n//     text: \"I SUCK at latte art.\",\n//     recipe:\n//       \"https://www.mother.ly/parenting/millennial-dads-spend-more-time-with-their-kids\",\n//     category: \"lattes\",\n//     votesMug: 17,\n//     votesHeart: 9,\n//     votesMindBlown: 1,\n//     createdIn: 2019,\n//   },\n//   {\n//     id: 3,\n//     text: \"Cortados are my favorite milk drink.\",\n//     source: \"https://en.wikipedia.org/wiki/Lisbon\",\n//     category: \"cortados\",\n//     votesMug: 8,\n//     votesHeart: 2,\n//     votesMindBlown: 1,\n//     createdIn: 2015,\n//   },\n// ];\n\n// function Counter() {\n//   const [count, setCount] = useState(0);\n\n//   return (\n//     <div>\n//       <span style={{ fontSize: \"40px\" }}>{count}</span>\n//       <button className=\"btn btn-large\" onClick={() => setCount((c) => c + 1)}>\n//         +1\n//       </button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [showForm, setShowForm] = useState(false);\n//   const [art, setArt] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [currentCategory, setCurrentCategory] = useState(\"all\");\n\n//   useEffect(\n//     function () {\n//       async function getArt() {\n//         setIsLoading(true);\n\n//         let query = supabase.from(\"art\").select(\"*\");\n\n//         if (currentCategory !== \"all\")\n//           query = query.eq(\"category\", currentCategory);\n\n//         const { data: art, error } = await query\n//           .order(\"votesMug\", { ascending: false })\n//           .limit(1000);\n\n//         if (!error) setArt(art);\n//         else alert(\"There was a problem getting data.\");\n//         setArt(art);\n//         setIsLoading(false);\n//       }\n//       getArt();\n//     },\n//     [currentCategory]\n//   );\n\n//   return (\n//     <>\n//       <Header showForm={showForm} setShowForm={setShowForm} />\n//       {showForm ? (\n//         <NewArtForm setArt={setArt} setShowForm={setShowForm} />\n//       ) : null}\n\n//       <main className=\"main\">\n//         <CategoryFilter setCurrentCategory={setCurrentCategory} />\n\n//         {isLoading ? <Loader /> : <ArtList art={art} setArt={setArt} />}\n//       </main>\n//     </>\n//   );\n// }\n\n// function Loader() {\n//   return <p className=\"message\">Loading...</p>;\n// }\n\n// function Header({ showForm, setShowForm }) {\n//   const appTitle = \"Today's Latte Art\";\n\n//   return (\n//     <header className=\"header\">\n//       <div className=\"logo\">\n//         <img\n//           src=\"logo.png\"\n//           height=\"68\"\n//           width=\"68\"\n//           alt=\"Today's Latte Art Logo\"\n//         />\n//         <h1>{appTitle}</h1>\n//       </div>\n//       <button\n//         className=\"btn btn-large btn-post\"\n//         onClick={() => setShowForm((show) => !show)}\n//       >\n//         {showForm ? \"Close\" : \"Share a picture\"}\n//       </button>\n//     </header>\n//   );\n// }\n\n// const CATEGORIES = [\n//   { name: \"espresso\", color: \"#3b82f6\" },\n//   { name: \"lattes\", color: \"#16a34a\" },\n//   { name: \"cortados\", color: \"#ef4444\" },\n//   { name: \"cappucinos\", color: \"#eab308\" },\n// ];\n\n// function isValidHttpUrl(string) {\n//   let url;\n//   try {\n//     url = new URL(string);\n//   } catch (_) {\n//     return false;\n//   }\n//   return url.protocol === \"http:\" || url.protocol === \"https:\";\n// }\n\n// function NewArtForm({ setArt, setShowForm }) {\n//   const [text, setText] = useState(\"\");\n//   const [recipe, setRecipe] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [isUploading, setIsUploading] = useState(false);\n//   const textLength = text.length;\n\n//   async function handleSubmit(e) {\n//     // 1. Prevent browser reload\n//     e.preventDefault();\n\n//     // 2. Check if data is valid. If so, create a new art\n//     if (text && isValidHttpUrl(recipe) && category && text.length <= 200)\n//       // 3. Upload art to Supabase and receive the new art object\n//       setIsUploading(true);\n//     const { data: newArt, error } = await supabase\n//       .from(\"art\")\n//       .insert([{ text, recipe, category }])\n//       .select();\n//     setIsUploading(false);\n\n//     // 4. Add new art to the UI\n//     if (!error) setArt((art) => [newArt[0], ...art]);\n\n//     // 5. Reset input fields\n//     setText(\"\");\n//     setRecipe(\"\");\n//     setCategory(\"\");\n\n//     // 6. Close the form\n//     setShowForm(false);\n//   }\n\n//   return (\n//     <form className=\"art-form\" onSubmit={handleSubmit}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Tell us about your latte art...\"\n//         value={text}\n//         onChange={(e) => setText(e.target.value)}\n//         disabled={isUploading}\n//       />\n//       <span>{200 - textLength}</span>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Recipe link...\"\n//         value={recipe}\n//         onChange={(e) => setRecipe(e.target.value)}\n//         disabled={isUploading}\n//       />\n//       <select\n//         value={category}\n//         onChange={(e) => setCategory(e.target.value)}\n//         disabled={isUploading}\n//       >\n//         <option value=\"\">Choose category:</option>\n//         {CATEGORIES.map((cat) => (\n//           <option key={cat.name} value={cat.name}>\n//             {cat.name.toUpperCase()}\n//           </option>\n//         ))}\n//       </select>\n//       <button className=\"btn btn-large\" disabled={isUploading}>\n//         Post\n//       </button>\n//     </form>\n//   );\n// }\n\n// function CategoryFilter({ setCurrentCategory }) {\n//   return (\n//     <aside>\n//       <ul>\n//         <li className=\"category\">\n//           <button\n//             className=\"btn btn-all-categories\"\n//             onClick={() => setCurrentCategory(\"all\")}\n//           >\n//             All\n//           </button>\n//         </li>\n//         {CATEGORIES.map((cat) => (\n//           <li key={cat.name} className=\"category\">\n//             <button\n//               className=\"btn btn-category\"\n//               style={{ backgroundColor: cat.color }}\n//               onClick={() => setCurrentCategory(cat.name)}\n//             >\n//               {cat.name}\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </aside>\n//   );\n// }\n\n// function ArtList({ art, setArt }) {\n//   if (art.length === 0)\n//     return (\n//       <p className=\"message\">\n//         No art for this category yet! Create the first one ‚òïÔ∏è\n//       </p>\n//     );\n\n//   return (\n//     <section>\n//       <ul className=\"art-list\">\n//         {art.map((art) => (\n//           <Art key={art.id} art={art} setArt={setArt} />\n//         ))}\n//       </ul>\n//       <p>There are {art.length} posts in the database. Add your own!</p>\n//     </section>\n//   );\n// }\n\n// function Art({ art, setArt }) {\n//   const [isUpdating, setIsUpdating] = useState(false);\n\n//   async function handleVote(columnName) {\n//     setIsUpdating(true);\n//     const { data: updatedArt, error } = await supabase\n//       .from(\"art\")\n//       .update({ [columnName]: art[columnName] + 1 })\n//       .eq(\"id\", art.id)\n//       .select();\n\n//     console.log(updatedArt);\n\n//     setIsUpdating(false);\n\n//     if (!error)\n//       setArt((art) => art.map((a) => (a.id === art.id ? updatedArt[0] : a)));\n//   }\n\n//   return (\n//     <li className=\"art\">\n//       <p>\n//         {art.text}\n//         <a className=\"recipe\" href={art.recipe} target=\"_blank\">\n//           (Source)\n//         </a>\n//       </p>\n//       <span\n//         className=\"tag\"\n//         style={{\n//           backgroundColor: CATEGORIES.find((cat) => cat.name === art.category)\n//             .color,\n//         }}\n//       >\n//         {art.category}\n//       </span>\n//       <div className=\"vote-buttons\">\n//         <button onClick={() => handleVote(\"votesMug\")} disabled={isUpdating}>\n//           ‚òïÔ∏è {art.votesMug}\n//         </button>\n//         <button onClick={() => handleVote(\"votesHeart\")} disabled={isUpdating}>\n//           ‚ù§Ô∏è {art.votesHeart}\n//         </button>\n//         <button\n//           onClick={() => handleVote(\"votesMindBlown\")}\n//           disabled={isUpdating}\n//         >\n//           ü§Ø {art.votesMindBlown}\n//         </button>\n//       </div>\n//     </li>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/Users/curtisatchley/Documents/Web Design Projects/Latte Art App/src/App.js"],"sourcesContent":["// import { useEffect, useState } from \"react\";\n// import supabase from \"./supabase\";\n// import \"./style.css\";\n\n// const initialArt = [\n//   {\n//     id: 1,\n//     text: \"This is my latte art. I made a flower.\",\n//     recipe: \"https://opensource.fb.com/\",\n//     category: \"espresso\",\n//     votesMug: 24,\n//     votesHeart: 9,\n//     votesMindBlown: 4,\n//     createdIn: 2021,\n//   },\n//   {\n//     id: 2,\n//     text: \"I SUCK at latte art.\",\n//     recipe:\n//       \"https://www.mother.ly/parenting/millennial-dads-spend-more-time-with-their-kids\",\n//     category: \"lattes\",\n//     votesMug: 17,\n//     votesHeart: 9,\n//     votesMindBlown: 1,\n//     createdIn: 2019,\n//   },\n//   {\n//     id: 3,\n//     text: \"Cortados are my favorite milk drink.\",\n//     source: \"https://en.wikipedia.org/wiki/Lisbon\",\n//     category: \"cortados\",\n//     votesMug: 8,\n//     votesHeart: 2,\n//     votesMindBlown: 1,\n//     createdIn: 2015,\n//   },\n// ];\n\n// function Counter() {\n//   const [count, setCount] = useState(0);\n\n//   return (\n//     <div>\n//       <span style={{ fontSize: \"40px\" }}>{count}</span>\n//       <button className=\"btn btn-large\" onClick={() => setCount((c) => c + 1)}>\n//         +1\n//       </button>\n//     </div>\n//   );\n// }\n\n// function App() {\n//   const [showForm, setShowForm] = useState(false);\n//   const [art, setArt] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [currentCategory, setCurrentCategory] = useState(\"all\");\n\n//   useEffect(\n//     function () {\n//       async function getArt() {\n//         setIsLoading(true);\n\n//         let query = supabase.from(\"art\").select(\"*\");\n\n//         if (currentCategory !== \"all\")\n//           query = query.eq(\"category\", currentCategory);\n\n//         const { data: art, error } = await query\n//           .order(\"votesMug\", { ascending: false })\n//           .limit(1000);\n\n//         if (!error) setArt(art);\n//         else alert(\"There was a problem getting data.\");\n//         setArt(art);\n//         setIsLoading(false);\n//       }\n//       getArt();\n//     },\n//     [currentCategory]\n//   );\n\n//   return (\n//     <>\n//       <Header showForm={showForm} setShowForm={setShowForm} />\n//       {showForm ? (\n//         <NewArtForm setArt={setArt} setShowForm={setShowForm} />\n//       ) : null}\n\n//       <main className=\"main\">\n//         <CategoryFilter setCurrentCategory={setCurrentCategory} />\n\n//         {isLoading ? <Loader /> : <ArtList art={art} setArt={setArt} />}\n//       </main>\n//     </>\n//   );\n// }\n\n// function Loader() {\n//   return <p className=\"message\">Loading...</p>;\n// }\n\n// function Header({ showForm, setShowForm }) {\n//   const appTitle = \"Today's Latte Art\";\n\n//   return (\n//     <header className=\"header\">\n//       <div className=\"logo\">\n//         <img\n//           src=\"logo.png\"\n//           height=\"68\"\n//           width=\"68\"\n//           alt=\"Today's Latte Art Logo\"\n//         />\n//         <h1>{appTitle}</h1>\n//       </div>\n//       <button\n//         className=\"btn btn-large btn-post\"\n//         onClick={() => setShowForm((show) => !show)}\n//       >\n//         {showForm ? \"Close\" : \"Share a picture\"}\n//       </button>\n//     </header>\n//   );\n// }\n\n// const CATEGORIES = [\n//   { name: \"espresso\", color: \"#3b82f6\" },\n//   { name: \"lattes\", color: \"#16a34a\" },\n//   { name: \"cortados\", color: \"#ef4444\" },\n//   { name: \"cappucinos\", color: \"#eab308\" },\n// ];\n\n// function isValidHttpUrl(string) {\n//   let url;\n//   try {\n//     url = new URL(string);\n//   } catch (_) {\n//     return false;\n//   }\n//   return url.protocol === \"http:\" || url.protocol === \"https:\";\n// }\n\n// function NewArtForm({ setArt, setShowForm }) {\n//   const [text, setText] = useState(\"\");\n//   const [recipe, setRecipe] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [isUploading, setIsUploading] = useState(false);\n//   const textLength = text.length;\n\n//   async function handleSubmit(e) {\n//     // 1. Prevent browser reload\n//     e.preventDefault();\n\n//     // 2. Check if data is valid. If so, create a new art\n//     if (text && isValidHttpUrl(recipe) && category && text.length <= 200)\n//       // 3. Upload art to Supabase and receive the new art object\n//       setIsUploading(true);\n//     const { data: newArt, error } = await supabase\n//       .from(\"art\")\n//       .insert([{ text, recipe, category }])\n//       .select();\n//     setIsUploading(false);\n\n//     // 4. Add new art to the UI\n//     if (!error) setArt((art) => [newArt[0], ...art]);\n\n//     // 5. Reset input fields\n//     setText(\"\");\n//     setRecipe(\"\");\n//     setCategory(\"\");\n\n//     // 6. Close the form\n//     setShowForm(false);\n//   }\n\n//   return (\n//     <form className=\"art-form\" onSubmit={handleSubmit}>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Tell us about your latte art...\"\n//         value={text}\n//         onChange={(e) => setText(e.target.value)}\n//         disabled={isUploading}\n//       />\n//       <span>{200 - textLength}</span>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Recipe link...\"\n//         value={recipe}\n//         onChange={(e) => setRecipe(e.target.value)}\n//         disabled={isUploading}\n//       />\n//       <select\n//         value={category}\n//         onChange={(e) => setCategory(e.target.value)}\n//         disabled={isUploading}\n//       >\n//         <option value=\"\">Choose category:</option>\n//         {CATEGORIES.map((cat) => (\n//           <option key={cat.name} value={cat.name}>\n//             {cat.name.toUpperCase()}\n//           </option>\n//         ))}\n//       </select>\n//       <button className=\"btn btn-large\" disabled={isUploading}>\n//         Post\n//       </button>\n//     </form>\n//   );\n// }\n\n// function CategoryFilter({ setCurrentCategory }) {\n//   return (\n//     <aside>\n//       <ul>\n//         <li className=\"category\">\n//           <button\n//             className=\"btn btn-all-categories\"\n//             onClick={() => setCurrentCategory(\"all\")}\n//           >\n//             All\n//           </button>\n//         </li>\n//         {CATEGORIES.map((cat) => (\n//           <li key={cat.name} className=\"category\">\n//             <button\n//               className=\"btn btn-category\"\n//               style={{ backgroundColor: cat.color }}\n//               onClick={() => setCurrentCategory(cat.name)}\n//             >\n//               {cat.name}\n//             </button>\n//           </li>\n//         ))}\n//       </ul>\n//     </aside>\n//   );\n// }\n\n// function ArtList({ art, setArt }) {\n//   if (art.length === 0)\n//     return (\n//       <p className=\"message\">\n//         No art for this category yet! Create the first one ‚òïÔ∏è\n//       </p>\n//     );\n\n//   return (\n//     <section>\n//       <ul className=\"art-list\">\n//         {art.map((art) => (\n//           <Art key={art.id} art={art} setArt={setArt} />\n//         ))}\n//       </ul>\n//       <p>There are {art.length} posts in the database. Add your own!</p>\n//     </section>\n//   );\n// }\n\n// function Art({ art, setArt }) {\n//   const [isUpdating, setIsUpdating] = useState(false);\n\n//   async function handleVote(columnName) {\n//     setIsUpdating(true);\n//     const { data: updatedArt, error } = await supabase\n//       .from(\"art\")\n//       .update({ [columnName]: art[columnName] + 1 })\n//       .eq(\"id\", art.id)\n//       .select();\n\n//     console.log(updatedArt);\n\n//     setIsUpdating(false);\n\n//     if (!error)\n//       setArt((art) => art.map((a) => (a.id === art.id ? updatedArt[0] : a)));\n//   }\n\n//   return (\n//     <li className=\"art\">\n//       <p>\n//         {art.text}\n//         <a className=\"recipe\" href={art.recipe} target=\"_blank\">\n//           (Source)\n//         </a>\n//       </p>\n//       <span\n//         className=\"tag\"\n//         style={{\n//           backgroundColor: CATEGORIES.find((cat) => cat.name === art.category)\n//             .color,\n//         }}\n//       >\n//         {art.category}\n//       </span>\n//       <div className=\"vote-buttons\">\n//         <button onClick={() => handleVote(\"votesMug\")} disabled={isUpdating}>\n//           ‚òïÔ∏è {art.votesMug}\n//         </button>\n//         <button onClick={() => handleVote(\"votesHeart\")} disabled={isUpdating}>\n//           ‚ù§Ô∏è {art.votesHeart}\n//         </button>\n//         <button\n//           onClick={() => handleVote(\"votesMindBlown\")}\n//           disabled={isUpdating}\n//         >\n//           ü§Ø {art.votesMindBlown}\n//         </button>\n//       </div>\n//     </li>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}